ディレクティブの構造
v-bind:value.sync="message"
v-bind ディレクティブ
:value 引数
.sync 修飾子
"message" 値(Javascriptの式)


node.jsを組み合わせることでCSSもvueファイルにまとめることが出来る
Awesome VueやVue Curated、Elementには豊富なコンポーネントが用意されておりそれらを組み合わせることでVueに適したUIを作成することが出来る。



Vueインスタンスの作成
let app = new Vue({
    //オプション
})
コンストラクタ関数Vueを使ってVueインスタンスを作成
返り値はルートのインスタンスになっていて、変数化しておくことでコンソールからもアクセス出来る。

{{}}
v-for in]


p40
handleClick: function (event) {
            alert(event.target);
        }
//[object HTMLButtonElement]
これの引数eventの意味がわからず。
ただbutton属性がターゲットということはわかる。


p41
.number修飾子で受け取る値を数値として受け取ることができる。
v-ifでtrueだった場合は表示される
下記をv-on:clickに仕込めばtrue、falseの反転が可能になる
ifBool: function () {
            this.show = !this.show;
        }

transitionタグで囲ったものにCSSアニメーションを仕込むことが出来る


・Vueインスタンスのオプションの代表的な構成
・mountする要素（elはelementの略)要素と紐付けるセレクター
el:'#app',

・アプリケーションで使用するデータ
data: {
    message: 'Vue.js',
}

・算出プロパティ(dataと似たような扱いが可能で関数によって算出された値を返す)
computed: {
    computedMessage: function () {
        return this.message + '!'
    }
}

・ライフサイクルフック(インスタンス作成、リアクティブの初期化が終わった後に行われる処理)
created: function() {
    //行いたい処理
}

・アプリケーションで使用するメソッド
methods: {
    myMethod: function () {
        //処理
    }
}

・ライフサイクルフック(createdとは行われるタイミングが異なる)
mounted: {
    //メソッド
}

computedとmethodsの違いがよくわからず
methodsには値を保持する機能がなくcomputedには保持する機能があるということ?

p46
createdとmountedの違い
createdはインスタンス作成、リアクティブの初期化が終わった後に行われる処理だがDOMの作成はまだ完了していない。
mountedは